start: (expr _NL)+


block: LBR _NL* (expr _NL+)* _NL* RBR

?expr: or_test "=" or_test -> assignation
    | "!" var PATH? -> display
    | or_test


?or_test: and_test ("or" and_test)*
?and_test: not_test ("and" not_test)*
?not_test: "not" not_test | comparison
!?comparison: arith_expr (comp_op arith_expr)*

!?comp_op: goe|loe|"<"|">"|"=="|"!="
!goe.2: ">="
!loe.2: "<="
!?arith_expr: term (("+"|"-") term)*
!?term: factor (("*"|"/"|"%"|integer_div) factor)*
?factor: minus factor | molecule

?molecule:
         | "fn" "(" [arguments] ")" block -> fn_def
         | molecule "(" [arguments] ")" -> func_call
         | molecule side_effect_tok CNAME -> side_effect_call
         | molecule "." CNAME -> getattr
         | atom

side_effect_tok.3: "->"

?atom: var | number | string | abc_def

arguments: argvalue ("," argvalue)*
?argvalue: expr

abc_def : "abc" STRING|LONG_STRING
var.2 : CNAME

string: STRING | LONG_STRING
number: DEC_NUMBER | FLOAT_NUMBER

!minus: "-"
!integer_div.2: "//"
LBR: "{"
RBR: "}"

STRING : /("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING: /(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

DEC_NUMBER: /0|[1-9]\d*/i
FLOAT_NUMBER: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i

COMMENT : /#[^\n]*/
PATH : /(?:\/?[a-zA-Z0-9\.\_-])*([a-zA-Z0-9]+\.?[a-zA-Z0-9]*)+/

_NL: (/\r?\n/)+

%import common.WS
%import common.CNAME
%import common.ESCAPED_STRING

%ignore COMMENT
%ignore WS